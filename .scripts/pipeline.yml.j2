---
variables:
  GITHUB_STATUS_ENABLE: 'true'
  ENABLE_CACHE: 'true'
  ENABLE_GITLAB_REGISTRY: 'true'
  MANIFEST_TOOL_VERSION: '2.0.8'
  DEBIAN_FRONTEND: "noninteractive"
  TERM: 'linux'

stages:
  - build
  - release

workflow:
  rules:
    - when: always

.tags:
  tags:
    - ix-ai

.build-template:
  stage: build
  extends:
    - .tags
  image:
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  retry: 2
  interruptible: true
  script:
    - set -ex
    - .scripts/kaniko-init.sh
    - export KANIKO_ARGS="${KANIKO_ARGS} --context ${WORKDIR} --dockerfile ${WORKDIR}/Dockerfile --cleanup"
    - |
      if [ "${ENABLE_GITLAB_REGISTRY}" = "true" ]; then \
        export KANIKO_ARGS="${KANIKO_ARGS} --destination=${CI_REGISTRY_IMAGE}:${TAG}"; \
      fi
    - |
      if [ -n "${DOCKERHUB_REPO_NAME}" ] && [ -n "${DOCKERHUB_PASSWORD}" ]; then \
        export KANIKO_ARGS="${KANIKO_ARGS} --destination=${DOCKERHUB_REPO_PREFIX}/${DOCKERHUB_REPO_NAME}:${TAG}"; \
      fi
    - |
      if [ "${ENABLE_CACHE}" == "true" ]; then \
        export KANIKO_ARGS="${KANIKO_ARGS} --cache"; \
        export KANIKO_ARGS="${KANIKO_ARGS} --cache-repo ${CI_REGISTRY_IMAGE}"; \
      fi
    - export KANIKO_ARGS="${KANIKO_ARGS} --build-arg CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}"
    - export KANIKO_ARGS="${KANIKO_ARGS} --build-arg CI_PIPELINE_ID=${CI_PIPELINE_ID}"
    - if [ -n "${CI_COMMIT_TAG}" ]; then KANIKO_ARGS="${KANIKO_ARGS} --build-arg LATEST=true"; fi
    - if [ ! "${ADDITIONAL_KANIKO_ARGS:-}x" = "x" ]; then export KANIKO_ARGS="${KANIKO_ARGS} ${ADDITIONAL_KANIKO_ARGS}"; fi
    - echo "/kaniko/executor ${KANIKO_ARGS}" > kaniko.sh
    - chmod +x kaniko.sh
    - ./kaniko.sh

.release-template:
  stage: release
  extends:
    - .tags
  image:
    name: python:alpine
  environment:
    name: production
  before_script:
    - pip install Jinja2
    - apk add curl coreutils
    - curl -sSL https://github.com/estesp/manifest-tool/releases/download/v${MANIFEST_TOOL_VERSION}/binaries-manifest-tool-${MANIFEST_TOOL_VERSION}.tar.gz | tar -xz -C /usr/local/bin
    - .scripts/kaniko-init.sh

{% for version in versions %}
{% for enabled_platform in enabled_platforms %}
build:{{ versions[version].version }}:{{ enabled_platform['short_name'] }}:
  extends:
    - .build-template
  variables:
    KANIKO_ARGS: --build-arg "{{ enabled_platform['build-arg'] }}" --custom-platform="{{ enabled_platform['long_name'] }}"
    QEMU_SHORT_VERSION: "{{ versions[version].major }}.{{ versions[version].minor }}"
    TAG: "{{ versions[version].major }}.{{ versions[version].minor }}{% if versions[version].get('rc') %}-rc{% endif %}-{{ enabled_platform['short_name'] }}"
    WORKDIR: "${CI_PROJECT_DIR}/{{ versions[version].major }}.{{ versions[version].minor }}{% if versions[version].get('rc') %}-rc{% endif %}"
  before_script:
    - if [ "${CI_COMMIT_REF_NAME}" != "${CI_DEFAULT_BRANCH}" ]; then export TAG="dev-${TAG}"; fi
{% endfor %}

release:{{ versions[version].version }}:
  extends:
    - .release-template
  variables:
    TAG: "{{ versions[version].major }}.{{ versions[version].minor }}{% if versions[version].get('rc') %}-rc{% endif %}"
  script:
    - export ADDITIONAL_ARGUMENTS=""
    - if [ "${CI_COMMIT_REF_NAME}" != "${CI_DEFAULT_BRANCH}" ]; then export ADDITIONAL_ARGUMENTS='-d'; fi
    - |
      if [ "${ENABLE_GITLAB_REGISTRY}" = "true" ]; then \
        set -x; \
        .scripts/generate-manifest.py ${ADDITIONAL_ARGUMENTS} -c ${TAG} -i ${CI_REGISTRY_IMAGE} -e '{{ args_target_platforms }}' > registry_gitlab.yml; \
        set +x; \
      fi
    - |
      if [ -n "${DOCKERHUB_REPO_NAME}" ] && [ -n "${DOCKERHUB_PASSWORD}" ]; then \
        set -x; \
        .scripts/generate-manifest.py ${ADDITIONAL_ARGUMENTS} -c ${TAG} -i ${DOCKERHUB_REPO_PREFIX}/${DOCKERHUB_REPO_NAME} -e '{{ args_target_platforms }}' > registry_dockerhub.yml; \
        set +x; \
      fi
    - |
      set -xeu; \
      find . \
        -name 'registry_*.yml' \
        -print \
        -exec cat {} ';' \
        -exec \
          /usr/local/bin/manifest-tool-linux-amd64 \
            --docker-cfg=/kaniko/.docker/config.json \
            push \
            from-spec {} \
            ';'
{% endfor %}
