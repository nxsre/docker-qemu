#!/usr/bin/env bash

# This script is inspired by the `start-qemu` script by @tianon:
# https://github.com/tianon/docker-qemu/blob/4597614c0012b3c026171135b035ec7bec21f38e/start-qemu

# main available options (environment variables):
#   QEMU_CPU=n                 (cores)
#   QEMU_RAM=nnn               (megabytes)
#   QEMU_HDA                   (filename)
#   QEMU_HDA_SIZE              (bytes, suffixes like "G" allowed)
#   QEMU_CDROM                 (filename)
#   QEMU_BOOT                  (-boot)
#   QEMU_PORTS="xxx[ xxx ...]" (space separated port numbers)
#   QEMU_NET_USER_EXTRA="net=192.168.76.0/24,dhcpstart=192.168.76.9"
#                              (extra raw args for "-net user,...")
#   QEMU_NO_SSH=1              (suppress automatic port 22 forwarding)
#   QEMU_NO_SERIAL=1           (suppress automatic "-serial stdio")
#   QEMU_NO_VNC=1              (suppress automatic "-vnc ':0'")
#   QEMU_ARCH                  one of aarch64, arm, i386, m68k, mips64, mips64el, ppc64, s390x, sparc64, x86_64
#                              (default: output of `uname -m`)
#   QEMU_MONPORT               the port for the QEMU Monitor (default: 7100)
#   QEMU_MACHINE="xxxx"        override the QEMU default machine type
#   QEMU_VARIABLES_FILE="xxx"  see below under 'create_file'

hostArch="$(uname -m)"
qemuArch="${QEMU_ARCH:-$hostArch}"
qemu="${QEMU_BIN:-qemu-system-$qemuArch}"


# create a file with the content of the QEMU_VARIABLES_FILE variable which
# allows the folder to be exposed then in QEMU. Example:
#
#      -drive file=fat:rw:/folder,id=drive2,if=none
#      -device driver=scsi-hd,drive=drive2
create_file(){
  if [ -n "${QEMU_VARIABLES_FILE:-}" ]; then
    echo "Creating file /qemu/qemu-variables-file ..."
    mkdir -p /qemu
    echo "${QEMU_VARIABLES_FILE}" > /qemu/qemu-variables-file
  fi
}

graceful_shutdown(){
  echo "Trying to shut down the VM gracefully"
  echo 'system_powerdown' | nc localhost ${QEMU_MONPORT:-7100}
  exit 0
}

# In case no CLI arguments were passed to the script, this function puts together some defaults
init_qemu(){
  IFS=" " read -r -a qemuPorts <<< "${QEMU_PORTS:-}"
  if [ -z "${QEMU_NO_SSH:-}" ]; then
    qemuPorts+=( 22 )
  fi

  if [ -c /dev/kvm ]; then
    qemuArgs+=( -enable-kvm )
  elif [ "$hostArch" == "$qemuArch" ]; then
    echo >&2
    echo >&2 'warning: /dev/kvm not found'
    echo >&2 '  PERFORMANCE WILL SUFFER'
    echo >&2 '  (hint: docker run --device /dev/kvm ...)'
    echo >&2
    sleep 3
  fi

  if [ -n "${QEMU_HDA:-}" ]; then
	  if [ ! -f "$QEMU_HDA" ] || [ ! -s "$QEMU_HDA" ]; then
	    (
	      set -x
	      qemu-img create -f qcow2 -o preallocation=off "$QEMU_HDA" "${QEMU_HDA_SIZE:-8G}"
				set +x
	    )
	  fi

	  # http://wiki.qemu.org/download/qemu-doc.html#Invocation
	  qemuScsiDevice='virtio-scsi-pci'
	  case "$qemuArch" in
	    arm) qemuScsiDevice='virtio-scsi-device' ;;
	  esac

	  qemuArgs+=(
	    -drive file="$QEMU_HDA",index=0,media=disk,discard=unmap,detect-zeroes=unmap,if=none,id=hda
	    -device "$qemuScsiDevice"
	    -device scsi-hd,drive=hda
	  )
	fi

	netArg="user,hostname=$(hostname)"
	if [ -n "${QEMU_NET_USER_EXTRA:-}" ]; then
	  netArg+=",$QEMU_NET_USER_EXTRA"
	fi
	for port in "${qemuPorts[@]}"; do
	  netArg+=",hostfwd=tcp::$port-:$port"
	  netArg+=",hostfwd=udp::$port-:$port"
	done

	qemuNetDevice='virtio-net-pci'
	case "$qemuArch" in
	  arm)
      qemuNetDevice='virtio-net-device'
      QEMU_MACHINE="${QEMU_MACHINE:-virt}"
      ;;
	esac

  if [ -n "${QEMU_MACHINE:-}" ]; then
    qemuArgs+=( -machine "$QEMU_MACHINE" )
  fi

	qemuArgs+=(
    -smp "${QEMU_CPU:-1}"
    -m "${QEMU_RAM:-512}"
	  -netdev "$netArg,id=net"
	  -device "$qemuNetDevice,netdev=net"
	)
  
  if [ -n "${QEMU_CDROM:-}" ]; then
    qemuArgs+=( -cdrom "$QEMU_CDROM" )
  fi

  if [ -n "${QEMU_BOOT:-}" ]; then
    qemuArgs+=( -boot "$QEMU_BOOT" )
  fi

	if [ -z "${QEMU_NO_SERIAL:-}" ]; then
	  qemuArgs+=( -serial stdio )
	fi

	if [ -z "${QEMU_NO_VNC:-}" ]; then
	  qemuArgs+=( -vnc ':0')
	fi

	CLI_ARGS="${qemuArgs[*]}"
}

CLI_ARGS="${*}"

trap graceful_shutdown SIGINT SIGTERM SIGHUP

if [ $# -eq 0 ]; then
  init_qemu
fi

CLI_ARGS="${CLI_ARGS} -monitor telnet:localhost:${QEMU_MONPORT:-7100},server,nowait,nodelay"

create_file

set -x
$qemu ${CLI_ARGS} &
wait $!
