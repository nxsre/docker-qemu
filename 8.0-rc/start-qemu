#!/usr/bin/env bash

set -Eeuo pipefail

DEBUG_SCRIPT="${DEBUG_SCRIPT:-false}"
[ "${DEBUG_SCRIPT}" == "true" ] && set -x

# This script is inspired by the `start-qemu` script by @tianon:
# https://github.com/tianon/docker-qemu/blob/4597614c0012b3c026171135b035ec7bec21f38e/start-qemu

# main available options (environment variables):
#   QEMU_CPU=n                 (cores)
#   QEMU_RAM=nnn               megabytes
#                              (default: 512)
#   QEMU_HDA                   (filename)
#   QEMU_HDA_SIZE              bytes, suffixes like "G" allowed
#                              (default: 8G)
#   QEMU_CDROM                 (filename)
#   QEMU_BOOT                  (-boot)
#   QEMU_PORTS="xxx[ xxx ...]" (space separated port numbers)
#   QEMU_NET_USER_EXTRA="net=192.168.76.0/24,dhcpstart=192.168.76.9"
#                              (extra raw args for "-net user,...")
#   QEMU_NO_SSH=1              (suppress automatic port 22 forwarding)
#   QEMU_NO_SERIAL=1           (suppress automatic "-serial stdio")
#   QEMU_NO_VNC=1              (suppress automatic "-vnc ':0'")
#   QEMU_MACHINE="xxxx"        override the QEMU default machine type
#   QEMU_ARCH                  one of i386, x86_64, aarch64, arm, mips64, mips64el, ppc64, sparc64
#                              (default: output of `uname -m`)
#   QEMU_MONPORT               the port for the QEMU Monitor (default: 7100)
#   QEMU_NO_QMP=1              disable the graceful shutdown handler, as well as QMP
#   QEMU_POWERDOWN_TIMEOUT     number of seconds to wait after a graceful shutdown before issuing `quit`
#                              (default: 120)

_HOST_ARCH="$(uname -m)"
_QEMU_ARCH=${QEMU_ARCH:-$_HOST_ARCH}

_QEMU_SHUTDOWN_COUNTER=/run/qemu.counter
_QEMU_PID=/run/qemu.pid

case ${_QEMU_ARCH} in
  "armv7l")
    _QEMU_ARCH="arm"
    ;;
esac
_QEMU="qemu-system-${_QEMU_ARCH}"

_graceful_shutdown(){
  echo "Trapped: $1"
  local QEMU_MONPORT="${QEMU_MONPORT:-7100}"
  local QEMU_POWERDOWN_TIMEOUT="${QEMU_POWERDOWN_TIMEOUT:-120}"
  echo 0 > "${_QEMU_SHUTDOWN_COUNTER}"

  echo "Trying to shut down the VM gracefully"
  echo 'system_powerdown' | nc -q 1 -w 1 localhost "${QEMU_MONPORT}">/dev/null || return
  while [ "$(cat ${_QEMU_SHUTDOWN_COUNTER})" -lt "${QEMU_POWERDOWN_TIMEOUT}" ]; do
    # Increase the counter
    echo $(($(cat ${_QEMU_SHUTDOWN_COUNTER})+1)) > ${_QEMU_SHUTDOWN_COUNTER}
    # Check if the process still exists
    if [ -d "/proc/$(cat ${_QEMU_PID})" ]; then
      echo "QEMU still running. Waiting... ($(cat ${_QEMU_SHUTDOWN_COUNTER})/${QEMU_POWERDOWN_TIMEOUT})"
      sleep 1
    fi
  done
  echo "Killing the VM"
  echo 'quit' | nc -q 1 -w 1 localhost "${QEMU_MONPORT}">/dev/null || true
  return
}

# Allows for troubleshooting signals sent to the process
# https://stackoverflow.com/a/9256709
_trap(){
    func="$1" ; shift
    for sig ; do
        # shellcheck disable=SC2064
        trap "$func $sig" "$sig"
    done
}

# In case no CLI arguments were passed to the script, this function puts together some defaults
_init_qemu(){
  IFS=" " read -r -a _QEMU_PORTS <<< "${QEMU_PORTS:-}"
  if [ -z "${QEMU_NO_SSH:-}" ]; then
    _QEMU_PORTS+=( 22 )
  fi

  if [ -c /dev/kvm ]; then
    _QEMU_ARGS+=( -enable-kvm )
  elif [ "$_HOST_ARCH" == "${_QEMU_ARCH}" ]; then
    echo >&2
    echo >&2 'warning: /dev/kvm not found'
    echo >&2 '  PERFORMANCE WILL SUFFER'
    echo >&2 '  (hint: docker run --device /dev/kvm ...)'
    echo >&2
    sleep 3
  fi

  if [ -n "${QEMU_HDA:-}" ]; then
    if [ ! -f "$QEMU_HDA" ] || [ ! -s "$QEMU_HDA" ]; then
      (
        set -x
        qemu-img create -f qcow2 -o preallocation=off "$QEMU_HDA" "${QEMU_HDA_SIZE:-8G}"
        set +x
      )
    fi

    # http://wiki.qemu.org/download/qemu-doc.html#Invocation
    _QEMU_SCSI_DEVICE='virtio-scsi-pci'
    case "${_QEMU_ARCH}" in
      arm) _QEMU_SCSI_DEVICE='virtio-scsi-device' ;;
    esac

    _QEMU_ARGS+=(
      -drive "file=$QEMU_HDA,index=0,media=disk,discard=unmap,detect-zeroes=unmap,if=none,id=hda"
      -device "$_QEMU_SCSI_DEVICE"
      -device "scsi-hd,drive=hda"
    )
  fi

  _NET_ARG="user,hostname=$(hostname)"
  if [ -n "${QEMU_NET_USER_EXTRA:-}" ]; then
    _NET_ARG+=",$QEMU_NET_USER_EXTRA"
  fi
  for port in "${_QEMU_PORTS[@]}"; do
    _NET_ARG+=",hostfwd=tcp::$port-:$port"
    _NET_ARG+=",hostfwd=udp::$port-:$port"
  done

  _QEMU_NET_DEVICE='virtio-net-pci'
  case "${_QEMU_ARCH}" in
    arm)
      _QEMU_NET_DEVICE='virtio-net-device'
      QEMU_MACHINE="${QEMU_MACHINE:-virt}"
      ;;
    aarch64)
      QEMU_MACHINE="${QEMU_MACHINE:-virt}"
  esac

  if [ -n "${QEMU_MACHINE:-}" ]; then
    _QEMU_ARGS+=( -machine "$QEMU_MACHINE" )
  fi

  _QEMU_ARGS+=(
    -smp "${QEMU_CPU:-1}"
    -m "${QEMU_RAM:-512}"
    -netdev "$_NET_ARG,id=net"
    -device "$_QEMU_NET_DEVICE,netdev=net"
  )

  if [ -n "${QEMU_CDROM:-}" ]; then
    _QEMU_ARGS+=( -cdrom "$QEMU_CDROM" )
  fi

  if [ -n "${QEMU_BOOT:-}" ]; then
    _QEMU_ARGS+=( -boot "$QEMU_BOOT" )
  fi

  if [ -z "${QEMU_NO_SERIAL:-}" ]; then
    _QEMU_ARGS+=( -serial stdio )
  fi

  if [ -z "${QEMU_NO_VNC:-}" ]; then
    _QEMU_ARGS+=( -vnc ':0')
  fi

  _CLI_ARGS="${_QEMU_ARGS[*]}"
}

_CLI_ARGS="${*}"

if [ $# -eq 0 ]; then
  _init_qemu
fi

if [ -n "${QEMU_NO_QMP:-}" ]; then
  echo >&2
  echo >&2 'warning: QEMU_NO_QMP is set'
  echo >&2 '  issuing "docker stop" will KILL the VM'
  echo >&2
  sleep 30
else
  _trap _graceful_shutdown SIGTERM SIGHUP SIGINT SIGABRT SIGQUIT
  _CLI_ARGS="${_CLI_ARGS} -monitor telnet:localhost:${QEMU_MONPORT:-7100},server,nowait,nodelay"
fi

set -m
(
  # Disable all the signals sent to the process
  # shellcheck disable=SC2064
  for _SIGNAL in {1..64}; do trap "echo Caught trap ${_SIGNAL} for the QEMU process" "${_SIGNAL}"; done
  set -x
  $_QEMU ${_CLI_ARGS} & echo $! > ${_QEMU_PID}
  set +x
)
set +m
[ "${DEBUG_SCRIPT}" == "true" ] && set -x

# Since we have to start the process with -m, we need to poll every intervall if it's still running
while [ -d "/proc/$(cat ${_QEMU_PID})"  ]; do
  sleep 1
done


